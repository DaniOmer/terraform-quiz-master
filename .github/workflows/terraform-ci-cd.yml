name: Terraform CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - test
          - prod
      action:
        description: "Terragrunt action to perform"
        required: true
        default: "plan"
        type: choice
        options:
          - plan
          - apply

# Add permissions for security uploads
permissions:
  contents: read
  security-events: write
  actions: read

env:
  TF_VERSION: "1.7.0"
  TFLINT_VERSION: "0.58.0"
  TERRAGRUNT_VERSION: "0.82.4"
  CHECKOV_VERSION: "2.5.0"
  DO_PAT_DEV: ${{ secrets.DO_PAT_DEV }}
  DO_PAT_TEST: ${{ secrets.DO_PAT_TEST }}
  DO_PAT_PROD: ${{ secrets.DO_PAT_PROD }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  terraform-validate:
    name: "Terragrunt Validation"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Setup Terragrunt
        run: |
          curl -LO "https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64"
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
          terragrunt -v

      - name: Terragrunt Format Check
        id: hclfmt
        run: terragrunt hcl format --all
        continue-on-error: true

      - name: Terragrunt Init (Dev)
        run: |
          cd envs/dev
          terragrunt init --all

      - name: Comment Format Check Results
        if: github.event_name == 'pull_request' && steps.fmt.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚ùå **Terraform Format Check Failed**\n\nPlease run `terraform fmt -recursive` to fix formatting issues.'
            })

  tflint:
    name: "TFLint Security & Best Practices"
    runs-on: ubuntu-latest
    needs: terraform-validate

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache TFLint plugin dir
        uses: actions/cache@v3
        with:
          path: ~/.tflint.d/plugins
          key: tflint-${{ hashFiles('.tflint.hcl') }}

      - uses: terraform-linters/setup-tflint@v4
        name: Setup TFLint
        with:
          tflint_version: v${{ env.TFLINT_VERSION }}

      - name: Show TFLint version
        run: tflint --version

      - name: Init TFLint
        run: tflint --init
        env:
          # https://github.com/terraform-linters/tflint/blob/master/docs/user-guide/plugins.md#avoiding-rate-limiting
          GITHUB_TOKEN: ${{ github.token }}

      - name: Run TFLint on modules
        run: |
          echo "Running TFLint on modules..."
          for module in modules/*/; do
            echo "Checking $module"
            tflint --chdir="$module" --format=compact --disable-rule=terraform_required_providers --disable-rule=terraform_required_version || echo "TFLint completed with warnings for $module"
          done
        continue-on-error: true

      - name: Run TFLint on environments
        run: |
          echo "Running TFLint on environments..."
          for env in envs/*/; do
            echo "Checking $env"
            tflint --chdir="$env" --format=compact || echo "TFLint completed with warnings for $env"
          done
        continue-on-error: true

  checkov:
    name: "Checkov Security Scan"
    runs-on: ubuntu-latest
    needs: terraform-validate

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install Checkov
        run: |
          pip install checkov==${{ env.CHECKOV_VERSION }}

      - name: Run Checkov scan
        id: checkov-scan
        run: |
          # Run Checkov and capture exit code
          checkov -d . \
            --framework terraform \
            --output cli \
            --output sarif \
            --output-file results_checkov.sarif \
            --quiet \
            --compact \
            --skip-check CKV_DO_3,CKV_DO_4,CKV_TF_1,CKV_TF_2 \
            --external-checks-dir . || CHECKOV_EXIT_CODE=$?

          # Check if SARIF file was created and is valid
          if [ -f results_checkov.sarif ]; then
            echo "SARIF file created successfully"
            # Validate SARIF file has content
            if [ -s results_checkov.sarif ]; then
              echo "SARIF file has content"
              # Check if it's valid JSON
              if ! jq . results_checkov.sarif > /dev/null 2>&1; then
                echo "SARIF file is not valid JSON, creating minimal valid SARIF"
                echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"Checkov","version":"'${{ env.CHECKOV_VERSION }}'"}},"results":[]}]}' > results_checkov.sarif
              fi
            else
              echo "SARIF file is empty, creating minimal valid SARIF"
              echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"Checkov","version":"'${{ env.CHECKOV_VERSION }}'"}},"results":[]}]}' > results_checkov.sarif
            fi
          else
            echo "SARIF file not created, creating minimal valid SARIF"
            echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"Checkov","version":"'${{ env.CHECKOV_VERSION }}'"}},"results":[]}]}' > results_checkov.sarif
          fi

          # Output scan results summary
          echo "scan-completed=true" >> $GITHUB_OUTPUT

          # Don't fail the job if Checkov finds issues
          exit 0

      - name: Upload Checkov results to GitHub Security
        if: always() && steps.checkov-scan.outputs.scan-completed == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results_checkov.sarif
          category: checkov
        continue-on-error: true

      - name: Display Checkov Summary
        if: always()
        run: |
          echo "## üîí Checkov Security Scan Results" >> $GITHUB_STEP_SUMMARY
          if [ -f results_checkov.sarif ]; then
            # Extract results count from SARIF
            RESULTS_COUNT=$(jq -r '.runs[0].results | length' results_checkov.sarif 2>/dev/null || echo "0")
            echo "- **Security Issues Found**: $RESULTS_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: Completed" >> $GITHUB_STEP_SUMMARY
            if [ "$RESULTS_COUNT" -gt "0" ]; then
              echo "- **Action Required**: Review findings in the Security tab" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Status**: ‚úÖ No security issues detected" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- **Status**: ‚ö†Ô∏è Scan failed to complete" >> $GITHUB_STEP_SUMMARY
          fi

  terraform-plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    needs: [tflint, checkov]
    strategy:
      matrix:
        environment: [dev, test, prod]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Setup Terragrunt
        run: |
          curl -LO "https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64"
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
          terragrunt -v

      - name: Terragrunt Init
        run: |
          cd envs/${{ matrix.environment }}
          terragrunt init --all

      - name: Terragrunt Plan
        id: plan
        run: |
          cd envs/${{ matrix.environment }}
          terraform plan --all -out=tfplan-${{ matrix.environment }} -no-color
        continue-on-error: true

      - name: Upload Terragrunt Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ matrix.environment }}
          path: envs/${{ matrix.environment }}/tfplan-${{ matrix.environment }}

      - name: Comment PR with Plan Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `### Terragrunt Plan Results for ${{ matrix.environment }}

            #### Terragrunt Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terragrunt Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terragrunt Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terragrunt
            ${{ steps.plan.outputs.stdout }}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Environment: \`${{ matrix.environment }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  terraform-apply:
    name: "Terraform Apply (Manual Approval Required)"
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.inputs.environment }}
      url: ${{ steps.apply.outputs.url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ github.event.inputs.environment }}
          path: envs/${{ github.event.inputs.environment }}/

      - name: Setup Terragrunt
        run: |
          curl -LO "https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64"
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
          terragrunt -v

      - name: Terragrunt Init
        run: |
          cd envs/${{ github.event.inputs.environment }}
          terragrunt init --all

      - name: Terragrunt Apply
        if: github.event.inputs.action == 'apply'
        id: apply
        run: |
          cd envs/${{ github.event.inputs.environment }}
          terragrunt apply --all tfplan-${{ github.event.inputs.environment }}
          echo "url=https://cloud.digitalocean.com" >> $GITHUB_OUTPUT

      - name: Comment Apply Results
        if: github.event.inputs.action == 'apply'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `‚úÖ **Terraform Apply Completed Successfully**
              
              Environment: \`${{ github.event.inputs.environment }}\`
              Triggered by: @${{ github.actor }}
              Time: ${new Date().toISOString()}`
            })

  security-summary:
    name: "Security Summary"
    runs-on: ubuntu-latest
    needs: [tflint, checkov]
    if: always()

    steps:
      - name: Security Check Summary
        run: |
          echo "## üîí Security & Quality Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Tool | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| TFLint | ${{ needs.tflint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Checkov | ${{ needs.checkov.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Review security findings in the Security tab" >> $GITHUB_STEP_SUMMARY
          echo "- Check TFLint recommendations for best practices" >> $GITHUB_STEP_SUMMARY
          echo "- For production deployment, use manual workflow dispatch" >> $GITHUB_STEP_SUMMARY
